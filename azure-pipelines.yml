trigger:
  branches:
    include:
    - master
    - rel/*
  paths:
    exclude:
    - '**/*.md'
    - 'UITests/*'

pr:
  branches:
    include:
    - master
    - rel/*
  paths:
    exclude:
    - '**/*.md'
    - 'UITests/*'

variables:
  BuildConfiguration: Release
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
- job: Build
  workspace:
    # Каждая пакет собирается в отдельную папку, поэтому приходится удалять прошлые сборки
    clean: outputs
  pool:
    #vmImage: windows-2019
    name: 'default'

  strategy:
    matrix:
      #Channel_CD_Web:
      #  ChannelName: CD-Web
      #  DistributionUrl: http://drucrmb.hq.ru.corp.leroymerlin.com:5555/RC
      #  MsixPackageId: LM.USD.Launcher.DevOpsDemo.CD
      #  MsixPublisherId: CN=agrunin
      #  MsixPackageDisplayName: LM.USD.Launcher (CD)
      #  MsixBuildMode: SideLoadOnly
      #  MsixGenerateAppInstaller: true
      Channel_Prod_Web:
        ChannelName: Prod-Web
        DistributionUrl: http://drucrmb.hq.ru.corp.leroymerlin.com:5555/
        MsixPackageId: LM.USD.Launcher.DevOpsDemo
        MsixPublisherId: CN=agrunin
        MsixPackageDisplayName: LM.USD.Launcher (Prod)
        MsixBuildMode: SideLoadOnly
        MsixGenerateAppInstaller: true

  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET SDK 5.x'
    inputs:
      version: 5.x

  - task: DotNetCoreCLI@2
    inputs:
      command: custom
      custom: tool
      arguments: update --tool-path . nbgv
    displayName: Install NBGV tool

  - script: nbgv cloud -c -a
    displayName: Set Version

  - powershell: |
      # Update appxmanifest. This must be done before build.
      # Set the per-channel values into the appxmanifest, replacing the checked-in values
      [xml]$manifest= get-content ".\LM.USD.Launcher\Package.appxmanifest"
      $manifest.Package.Identity.Version = "$(GitBuildVersionSimple).0"
      $manifest.Package.Identity.Name = "$(MsixPackageId)"
      $manifest.Package.Identity.Publisher = "$(MsixPublisherId)"
      $manifest.Package.Properties.DisplayName = "$(MsixPackageDisplayName)"
      $manifest.Package.Applications.Application.VisualElements.DisplayName = "$(MsixPackageDisplayName)"
      $manifest.save(".\LM.USD.Launcher\Package.appxmanifest")

    displayName: Update manifest version

  - task: MSBuild@1
    displayName: Build for $(BuildConfiguration)
    inputs:
      solution: MyWPFApp.sln
      platform: x86
      msbuildArguments: /restore /p:AppInstallerUri=$(DistributionUrl) /p:UapAppxPackageBuildMode=$(MsixBuildMode) /p:GenerateAppInstallerFile=$(MsixGenerateAppInstaller)
      configuration: $(BuildConfiguration)
      maximumCpuCount: false

  #- script: copy build.cer LM.USD.Launcher\AppPackages\LM.USD.Launcher_$(GitBuildVersionSimple).0_x86_Test\LM.USD.Launcher_$(GitBuildVersionSimple).0_x86.cer
  #  displayName: Copy Certificate to versioned dir
  #  condition: and(succeeded(), not(eq(variables['ChannelName'], 'Prod-Store')))

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: $(ChannelName)
      targetPath: LM.USD.Launcher/AppPackages

  #- task: CopyFiles@2
  #  displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
  #  inputs:
  #    SourceFolder: '$(system.defaultworkingdirectory)'
  #    Contents: '**\bin\$(BuildConfiguration)\**'
  #    TargetFolder: '$(build.artifactstagingdirectory)'

  #- task: PublishBuildArtifacts@1
  #  displayName: 'Publish Artifact: drop'
  #  inputs:
  #    PathtoPublish: '$(build.artifactstagingdirectory)'
